// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: learning.proto

package learning

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LearningServiceClient is the client API for LearningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LearningServiceClient interface {
	GetLanguages(ctx context.Context, in *GetLanguageRequest, opts ...grpc.CallOption) (*GetLanguageResponse, error)
	StartLearnLanguage(ctx context.Context, in *StartLanguageRequest, opts ...grpc.CallOption) (*StartLanguageResponse, error)
	GetLessonsList(ctx context.Context, in *Language, opts ...grpc.CallOption) (*LessonsListResponse, error)
	GetInfoLessons(ctx context.Context, in *GetInfoLessonsResponse, opts ...grpc.CallOption) (*LessonsInfoRepository, error)
	ComplateLesson(ctx context.Context, in *Lesson, opts ...grpc.CallOption) (*ComplateLessonResponse, error)
	GetLanguageExercises(ctx context.Context, in *Language, opts ...grpc.CallOption) (*LanguageExerciseResponse, error)
	SubmitExerciseAnswer(ctx context.Context, in *ExerciseAnswerRequest, opts ...grpc.CallOption) (*ExerciseAnswerResponse, error)
	GetVocabularyList(ctx context.Context, in *Language, opts ...grpc.CallOption) (*VocabularyListResponse, error)
	AddVocabulary(ctx context.Context, in *AddVocabularyRequest, opts ...grpc.CallOption) (*AddVocabularyResponse, error)
}

type learningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLearningServiceClient(cc grpc.ClientConnInterface) LearningServiceClient {
	return &learningServiceClient{cc}
}

func (c *learningServiceClient) GetLanguages(ctx context.Context, in *GetLanguageRequest, opts ...grpc.CallOption) (*GetLanguageResponse, error) {
	out := new(GetLanguageResponse)
	err := c.cc.Invoke(ctx, "/learning.LearningService/GetLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) StartLearnLanguage(ctx context.Context, in *StartLanguageRequest, opts ...grpc.CallOption) (*StartLanguageResponse, error) {
	out := new(StartLanguageResponse)
	err := c.cc.Invoke(ctx, "/learning.LearningService/StartLearnLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) GetLessonsList(ctx context.Context, in *Language, opts ...grpc.CallOption) (*LessonsListResponse, error) {
	out := new(LessonsListResponse)
	err := c.cc.Invoke(ctx, "/learning.LearningService/GetLessonsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) GetInfoLessons(ctx context.Context, in *GetInfoLessonsResponse, opts ...grpc.CallOption) (*LessonsInfoRepository, error) {
	out := new(LessonsInfoRepository)
	err := c.cc.Invoke(ctx, "/learning.LearningService/GetInfoLessons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) ComplateLesson(ctx context.Context, in *Lesson, opts ...grpc.CallOption) (*ComplateLessonResponse, error) {
	out := new(ComplateLessonResponse)
	err := c.cc.Invoke(ctx, "/learning.LearningService/ComplateLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) GetLanguageExercises(ctx context.Context, in *Language, opts ...grpc.CallOption) (*LanguageExerciseResponse, error) {
	out := new(LanguageExerciseResponse)
	err := c.cc.Invoke(ctx, "/learning.LearningService/GetLanguageExercises", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) SubmitExerciseAnswer(ctx context.Context, in *ExerciseAnswerRequest, opts ...grpc.CallOption) (*ExerciseAnswerResponse, error) {
	out := new(ExerciseAnswerResponse)
	err := c.cc.Invoke(ctx, "/learning.LearningService/SubmitExerciseAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) GetVocabularyList(ctx context.Context, in *Language, opts ...grpc.CallOption) (*VocabularyListResponse, error) {
	out := new(VocabularyListResponse)
	err := c.cc.Invoke(ctx, "/learning.LearningService/GetVocabularyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) AddVocabulary(ctx context.Context, in *AddVocabularyRequest, opts ...grpc.CallOption) (*AddVocabularyResponse, error) {
	out := new(AddVocabularyResponse)
	err := c.cc.Invoke(ctx, "/learning.LearningService/AddVocabulary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LearningServiceServer is the server API for LearningService service.
// All implementations must embed UnimplementedLearningServiceServer
// for forward compatibility
type LearningServiceServer interface {
	GetLanguages(context.Context, *GetLanguageRequest) (*GetLanguageResponse, error)
	StartLearnLanguage(context.Context, *StartLanguageRequest) (*StartLanguageResponse, error)
	GetLessonsList(context.Context, *Language) (*LessonsListResponse, error)
	GetInfoLessons(context.Context, *GetInfoLessonsResponse) (*LessonsInfoRepository, error)
	ComplateLesson(context.Context, *Lesson) (*ComplateLessonResponse, error)
	GetLanguageExercises(context.Context, *Language) (*LanguageExerciseResponse, error)
	SubmitExerciseAnswer(context.Context, *ExerciseAnswerRequest) (*ExerciseAnswerResponse, error)
	GetVocabularyList(context.Context, *Language) (*VocabularyListResponse, error)
	AddVocabulary(context.Context, *AddVocabularyRequest) (*AddVocabularyResponse, error)
	mustEmbedUnimplementedLearningServiceServer()
}

// UnimplementedLearningServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLearningServiceServer struct {
}

func (UnimplementedLearningServiceServer) GetLanguages(context.Context, *GetLanguageRequest) (*GetLanguageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguages not implemented")
}
func (UnimplementedLearningServiceServer) StartLearnLanguage(context.Context, *StartLanguageRequest) (*StartLanguageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartLearnLanguage not implemented")
}
func (UnimplementedLearningServiceServer) GetLessonsList(context.Context, *Language) (*LessonsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLessonsList not implemented")
}
func (UnimplementedLearningServiceServer) GetInfoLessons(context.Context, *GetInfoLessonsResponse) (*LessonsInfoRepository, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoLessons not implemented")
}
func (UnimplementedLearningServiceServer) ComplateLesson(context.Context, *Lesson) (*ComplateLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComplateLesson not implemented")
}
func (UnimplementedLearningServiceServer) GetLanguageExercises(context.Context, *Language) (*LanguageExerciseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguageExercises not implemented")
}
func (UnimplementedLearningServiceServer) SubmitExerciseAnswer(context.Context, *ExerciseAnswerRequest) (*ExerciseAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitExerciseAnswer not implemented")
}
func (UnimplementedLearningServiceServer) GetVocabularyList(context.Context, *Language) (*VocabularyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVocabularyList not implemented")
}
func (UnimplementedLearningServiceServer) AddVocabulary(context.Context, *AddVocabularyRequest) (*AddVocabularyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVocabulary not implemented")
}
func (UnimplementedLearningServiceServer) mustEmbedUnimplementedLearningServiceServer() {}

// UnsafeLearningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LearningServiceServer will
// result in compilation errors.
type UnsafeLearningServiceServer interface {
	mustEmbedUnimplementedLearningServiceServer()
}

func RegisterLearningServiceServer(s grpc.ServiceRegistrar, srv LearningServiceServer) {
	s.RegisterService(&LearningService_ServiceDesc, srv)
}

func _LearningService_GetLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learning.LearningService/GetLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetLanguages(ctx, req.(*GetLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_StartLearnLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).StartLearnLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learning.LearningService/StartLearnLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).StartLearnLanguage(ctx, req.(*StartLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_GetLessonsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Language)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetLessonsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learning.LearningService/GetLessonsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetLessonsList(ctx, req.(*Language))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_GetInfoLessons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoLessonsResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetInfoLessons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learning.LearningService/GetInfoLessons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetInfoLessons(ctx, req.(*GetInfoLessonsResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_ComplateLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lesson)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).ComplateLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learning.LearningService/ComplateLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).ComplateLesson(ctx, req.(*Lesson))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_GetLanguageExercises_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Language)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetLanguageExercises(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learning.LearningService/GetLanguageExercises",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetLanguageExercises(ctx, req.(*Language))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_SubmitExerciseAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExerciseAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).SubmitExerciseAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learning.LearningService/SubmitExerciseAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).SubmitExerciseAnswer(ctx, req.(*ExerciseAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_GetVocabularyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Language)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetVocabularyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learning.LearningService/GetVocabularyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetVocabularyList(ctx, req.(*Language))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_AddVocabulary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVocabularyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).AddVocabulary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learning.LearningService/AddVocabulary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).AddVocabulary(ctx, req.(*AddVocabularyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LearningService_ServiceDesc is the grpc.ServiceDesc for LearningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LearningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "learning.LearningService",
	HandlerType: (*LearningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLanguages",
			Handler:    _LearningService_GetLanguages_Handler,
		},
		{
			MethodName: "StartLearnLanguage",
			Handler:    _LearningService_StartLearnLanguage_Handler,
		},
		{
			MethodName: "GetLessonsList",
			Handler:    _LearningService_GetLessonsList_Handler,
		},
		{
			MethodName: "GetInfoLessons",
			Handler:    _LearningService_GetInfoLessons_Handler,
		},
		{
			MethodName: "ComplateLesson",
			Handler:    _LearningService_ComplateLesson_Handler,
		},
		{
			MethodName: "GetLanguageExercises",
			Handler:    _LearningService_GetLanguageExercises_Handler,
		},
		{
			MethodName: "SubmitExerciseAnswer",
			Handler:    _LearningService_SubmitExerciseAnswer_Handler,
		},
		{
			MethodName: "GetVocabularyList",
			Handler:    _LearningService_GetVocabularyList_Handler,
		},
		{
			MethodName: "AddVocabulary",
			Handler:    _LearningService_AddVocabulary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "learning.proto",
}
